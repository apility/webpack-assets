<?php


namespace Apility\WebpackAssets;


use stdClass;
use Tightenco\Collect\Support\Collection;

/**
 * A helper class for reading the manifest generated by webpack-assets-manifest,
 * and output relevant link and script tags.
 *
 * Class WebpackAssets
 * @package Helpers
 */
class WebpackAssets {
  static $defaultOptions = [
    'defaultEntrypoint' => 'app',
    'preload' => true,
  ];

  /** @var object */
  protected $options;
  /** @var object */
  protected $manifest;

  /**
   * @noinspection PhpDocMissingThrowsInspection
   *
   * WebpackAssets constructor.
   * @param string|array|object $manifest Path to, or full object or string of manifest.
   *  <p>An absolute path to generated manifest file. Must start with / to be treated as a file path.</p>
   *  <p>The manifest string.</p>
   *  <p>A deserialized array of object of the manifest file.</p>
   * @param array|object $options [optional]
   */
  public function __construct ($manifest, $options = null) {
    if ($manifest instanceof stdClass) {
      $this->manifest = $manifest;
    } else if (is_array($manifest)) {
      $this->manifest = json_decode(json_encode($manifest));
    } else if (is_string($manifest)) {
      if (strlen($manifest) === 0) {
        /** @noinspection PhpUnhandledExceptionInspection */
        throw new WebpackAssetsException('Invalid manifest');
      }

      if ($manifest[0] === '/') {
        $this->manifest = json_decode(file_get_contents($manifest));
      } else {
        $this->manifest = json_decode($manifest);
      }
    } else {
      /** @noinspection PhpUnhandledExceptionInspection */
      throw new WebpackAssetsException('Invalid manifest');
    }

    $this->options = (object) array_merge(
      static::$defaultOptions,
      (array) $options
    );
  }

  /**
   * @noinspection PhpDocMissingThrowsInspection
   * @param string|null $entrypointName
   * @return object
   */
  protected function getEntrypoint ($entrypointName = null) {
    $entrypointName = $entrypointName ?? $this->options->entrypoint;

    $entrypoint = $this->manifest->entrypoints->{$entrypointName ?? $this->options->defaultEntrypoint} ?? null;

    if ($entrypoint === null) {
      /** @noinspection PhpUnhandledExceptionInspection */
      throw new WebpackAssetsException("No entrypoint found in manifest by name: {$entrypointName}");
    }

    return $entrypoint;
  }

  /**
   * @param string $href
   * @param string $rel
   * @param string|null $as
   * @return string
   */
  protected function getLinkTag ($href, $rel, $as = null) {
    $attributes = new Collection();

    $attributes->push("href=\"{$href}\"");

    $attributes->push("rel=\"{$rel}\"");

    if ($as) {
      $attributes->push("as=\"${as}\"");
    }

    return "<link {$attributes->join(' ')}>";
  }

  /**
   * @param string $src
   * @return string
   */
  protected function getScriptTag ($src) {
    return "<script src=\"{$src}\"></script>";
  }

  /**
   * @noinspection PhpDocMissingThrowsInspection
   * @param string|null $entrypointName
   * @return string
   */
  function getHeadAssets ($entrypointName = null) {
    /** @noinspection PhpUnhandledExceptionInspection */
    $entrypoint = $this->getEntrypoint($entrypointName);

    $tags = new Collection();

    $css = collect($entrypoint->css);
    $js = collect($entrypoint->js);

    if ($this->options->preload) {
      $css->each(function ($styleAssetPath) use ($tags) {
        $tags->push($this->getLinkTag($styleAssetPath, 'preload', 'style'));
      });

      $js->each(function ($scriptAssetPath) use ($tags) {
        $tags->push($this->getLinkTag($scriptAssetPath, 'preload', 'script'));
      });
    }

    $css->each(function ($styleAssetPath) use ($tags) {
      $tags->push($this->getLinkTag($styleAssetPath, 'stylesheet'));
    });

    return $tags->join("\n");
  }

  /**
   * @noinspection PhpDocMissingThrowsInspection
   * @param string|null $entrypointName
   * @return string
   */
  function getBodyAssets ($entrypointName = null) {
    /** @noinspection PhpUnhandledExceptionInspection */
    $entrypoint = $this->getEntrypoint($entrypointName);

    $tags = new Collection();

    $js = collect($entrypoint->js);

    $js->each(function ($scriptAssetPath) use ($tags) {
      $tags->push($this->getScriptTag($scriptAssetPath));
    });

    return $tags->join("\n");
  }
}
