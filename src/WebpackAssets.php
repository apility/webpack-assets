<?php


namespace Apility\WebpackAssets;


use Apility\WebpackAssets\utils\TagBuilder;
use Closure;
use stdClass;
use Tightenco\Collect\Support\Collection;

/**
 * A helper class for reading the manifest generated by webpack-assets-manifest,
 * and output relevant link and script tags.
 *
 * Class WebpackAssets
 * @package Helpers
 */
class WebpackAssets {
  static $defaultOptions = [
    'entrypointName' => 'app',
    'preload' => true,
    'integrity' => false,
  ];

  /** @var object */
  protected $options;
  /** @var object */
  protected $manifest;

  /**
   * @noinspection PhpDocMissingThrowsInspection
   *
   * WebpackAssets constructor.
   * @param string|array|object $manifest Path to, or full object or string of manifest.
   *  <p>An absolute path to generated manifest file. Must start with / to be treated as a file path.</p>
   *  <p>The manifest string.</p>
   *  <p>A deserialized array of object of the manifest file.</p>
   * @param array|object $options [optional]
   */
  public function __construct ($manifest, $options = null) {
    if ($manifest instanceof stdClass) {
      $this->manifest = $manifest;
    } else if (is_array($manifest)) {
      $this->manifest = json_decode(json_encode($manifest));
    } else if (is_string($manifest)) {
      if (strlen($manifest) === 0) {
        /** @noinspection PhpUnhandledExceptionInspection */
        throw new WebpackAssetsException('Invalid manifest');
      }

      if ($manifest[0] === '/') {
        $this->manifest = json_decode(file_get_contents($manifest));
      } else {
        $this->manifest = json_decode($manifest);
      }
    } else {
      /** @noinspection PhpUnhandledExceptionInspection */
      throw new WebpackAssetsException('Invalid manifest');
    }

    $this->options = $this->mergeOptions($options);
  }

  /**
   * @param array|object $optionsOverride
   * @return object
   */
  protected function mergeOptions ($optionsOverride) {
    return (object) array_merge(
      (array) static::$defaultOptions,
      (array) $this->options,
      (array) $optionsOverride
    );
  }

  /**
   * @noinspection PhpDocMissingThrowsInspection
   * @param string $entrypointName
   * @return object
   */
  protected function getEntrypoint ($entrypointName) {
    $entrypoint = $this->manifest->entrypoints->{$entrypointName} ?? null;

    if ($entrypoint === null) {
      /** @noinspection PhpUnhandledExceptionInspection */
      throw new WebpackAssetsException("No entrypoint found in manifest by name: {$entrypointName}");
    }

    return $entrypoint;
  }

  /**
   * @param string $href
   * @param string $as
   * @param string $integrity [optional]
   * @return string
   */
  protected static function createPreloadLinkTag ($href, $as, $integrity = null) {
    $attributes = new Collection();

    $attributes->put('href', $href);

    $attributes->put('rel', 'preload');

    $attributes->put('as', $as);

    if ($integrity) {
      $attributes->put('integrity', $integrity);

      $attributes->put('crossorigin', 'anonymous');
    }

    return TagBuilder::createTag('link', $attributes, null, 'self-closing');
  }

  /**
   * @param string $href
   * @param string $rel
   * @param string $integrity [optional]
   * @return string
   */
  protected static function createLinkTag ($href, $rel, $integrity = null) {
    $attributes = new Collection();

    $attributes->put('href', $href);

    $attributes->put('rel', $rel);

    if ($integrity) {
      $attributes->put('integrity', $integrity);

      $attributes->put('crossorigin', 'anonymous');
    }

    return TagBuilder::createTag('link', $attributes, null, 'self-closing');
  }

  /**
   * @param string $src
   * @param string $integrity [optional]
   * @return string
   */
  protected static function createScriptTag ($src, $integrity = null) {
    $attributes = new Collection();

    $attributes->put('src', $src);

    if ($integrity) {
      $attributes->put('integrity', $integrity);

      $attributes->put('crossorigin', 'anonymous');
    }

    return TagBuilder::createTag('script', $attributes);
  }

  /**
   * @param $options
   * @return Closure
   */
  protected function createIntegrityMapFunction ($options) {
    return function (string $assetPath) use ($options) {
      $src = $assetPath;

      $integrity = null;

      if ($options->integrity) {
        $assetObject = collect($this->manifest)->first(function ($value) use ($assetPath) {
          if ($value instanceof stdClass && $value->src === $assetPath && $value->integrity) {
            return true;
          }

          return false;
        });

        if (!$assetObject) {
          throw new WebpackAssetsException("Couldn't find integrity for asset {$assetPath}");
        }

        $integrity = $assetObject->integrity;
      }

      return (object) [
        'src' => $src,
        'integrity' => $integrity,
      ];
    };
  }

  /**
   * @noinspection PhpDocMissingThrowsInspection
   * @param array|object $optionsOverride [optional]
   * @return string
   * @throws WebpackAssetsException
   */
  function getHeadAssets ($optionsOverride = null) {
    $options = $this->mergeOptions($optionsOverride);
    $entrypoint = $this->getEntrypoint($options->entrypointName);

    $integrityMapFunction = $this->createIntegrityMapFunction($options);

    $styleAssets = collect($entrypoint->css)->map($integrityMapFunction);
    $scriptAssets = collect($entrypoint->js)->map($integrityMapFunction);

    $tags = new Collection();

    if ($options->preload) {
      $styleAssets
        ->map(function ($styleAsset) {
          return static::createPreloadLinkTag($styleAsset->src, 'style', $styleAsset->integrity);
        })
        ->each(function ($tag) use ($tags) {
          $tags->push($tag);
        });

      $scriptAssets
        ->map(function ($scriptAsset) {
          return static::createPreloadLinkTag($scriptAsset->src, 'script', $scriptAsset->integrity);
        })
        ->each(function ($tag) use ($tags) {
          $tags->push($tag);
        });
    }

    $styleAssets
      ->map(function ($styleAsset) {
        return static::createLinkTag($styleAsset->src, 'stylesheet', $styleAsset->integrity);
      })
      ->each(function ($tag) use ($tags) {
        $tags->push($tag);
      });

    return $tags->join("\n");
  }

  /**
   * @noinspection PhpDocMissingThrowsInspection
   * @param array|object $optionsOverride [optional]
   * @return string
   * @throws WebpackAssetsException
   */
  function getBodyAssets ($optionsOverride = null) {
    $options = $this->mergeOptions($optionsOverride);
    $entrypoint = $this->getEntrypoint($options->entrypointName);

    $integrityMapFunction = $this->createIntegrityMapFunction($options);

    $scriptAssets = collect($entrypoint->js)->map($integrityMapFunction);

    $tags = new Collection();

    $scriptAssets
      ->map(function ($scriptAsset) {
        return static::createScriptTag($scriptAsset->src, $scriptAsset->integrity);
      })
      ->each(function ($tag) use ($tags) {
        $tags->push($tag);
      });

    return $tags->join("\n");
  }
}
